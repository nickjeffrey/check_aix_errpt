#!/usr/bin/ksh

# nagios helper script to alert on AIX errpt entries.
# This script will alert whenever there is an errpt entry on an AIX box.
#
# The sysadmin will is expected to investigate the root cause,
# resolve the issue, and then clear the errpt with "errclear 0"


# CHANGE LOG
# -----------
#  2010/06/04   njeffrey           Script created
#  2021/11/05   njeffrey           Workaround for bug in AIX 7200-03, non-root user cannot run errpt https://www.ibm.com/support/pages/apar/IJ10405
#  2021/11/08   njeffrey           Try sudo if  AIX 7200-03 detected to work around APAR IJ10405
#  2021/11/08   njeffrey           Add $verbose flag for debugging

#
# Sample errpt output:
#
# IDENTIFIER TIMESTAMP  T C RESOURCE_NAME  DESCRIPTION
# A63BEB70   0626155306 P S SYSPROC        SOFTWARE PROGRAM ABNORMALLY TERMINATED
# ...
#
#
# Date/time format mmddhhmmyy (month, day, hour, minute, and year)
#



function declare_variables {
   #
   errpt=/usr/bin/errpt
   grep=/usr/bin/grep
   egrep=/usr/bin/egrep
   tr=/usr/bin/tr
   awk=/usr/bin/awk
   oslevel=/usr/bin/oslevel
   #
   # define verbose output (yes|no)
   verbose=no
   #
   #
   # Nagios return codes
   #
   OK=0
   WARN=1
   CRITICAL=2
   UNKNOWN=3
   #
   CHECK_NAME="AIX errpt"
}



function sanity_checks {
   #
   # this section checks file permissions
   #
   if [[ $verbose = "yes" ]] ; then
      echo Running sanity_checks function
   fi
   #
   if [[ ! -f "$errpt" ]] then
      echo "$CHECK_NAME UKNOWN required file $errpt not found "
      exit $UNKNOWN
   fi
   if [[ ! -x "$errpt" ]] then
      echo "$CHECK_NAME UNKNOWN required file $errpt is not executable by the nagios user "
      exit $UNKNOWN
   fi
   if [[ ! -f "$egrep" ]] then
      echo "$CHECK_NAME UKNOWN required file $egrep not found "
      exit $UNKNOWN
   fi
   if [[ ! -x "$egrep" ]] then
      echo "$CHECK_NAME UNKNOWN required file $egrep is not executable by the nagios user "
      exit $UNKNOWN
   fi
   if [[ ! -f "$tr" ]] then
      echo "$CHECK_NAME UKNOWN required file $tr not found "
      exit $UNKNOWN
   fi
   if [[ ! -x "$tr" ]] then
      echo "$CHECK_NAME UNKNOWN required file $tr is not executable by the nagios user "
      exit $UNKNOWN
   fi
   if [[ ! -f "$awk" ]] then
      echo "$CHECK_NAME UKNOWN required file $awk not found "
      exit $UNKNOWN
   fi
   if [[ ! -x "$awk" ]] then
      echo "$CHECK_NAME UNKNOWN required file $awk is not executable by the nagios user "
      exit $UNKNOWN
   fi
   if [[ ! -f "$oslevel" ]] then
      echo "$CHECK_NAME UKNOWN required file $oslevel not found "
      exit $UNKNOWN
   fi
   if [[ ! -x "$oslevel" ]] then
      echo "$CHECK_NAME UNKNOWN required file $oslevel is not executable by the nagios user "
      exit $UNKNOWN
   fi
}



function check_for_7200_03_bug {
   #
   # If the AIX patch level is 7200-03, APAR IJ10405 bug means non-root users cannot run errpt.  Fixed by 7200-04
   # https://www.ibm.com/support/pages/apar/IJ10405
   #
   if [[ $verbose = "yes" ]] ; then
      echo Running check_for_7200_03_bug function
   fi
   #
   # get AIX patch level
   aix_patch_level=`$oslevel -s | $egrep -c '^7200-03'`
   if [[ "$aix_patch_level" -eq 1 ]] then
      if [[ $verbose = "yes" ]] ; then
         echo Running Detected AIX patch level 7200-03, will need to use sudo to check errpt due to APAR IJ10405
      fi
   fi
}



function check_for_errpt_entries {
   #
   # This section checks to see if there are errpt entries
   #
   if [[ $verbose = "yes" ]] ; then
      echo Running check_for_errpt_entries function
   fi
   #
   #
   # get number of errpt entries
   # workaround for AIX 7200-03, try using sudo
   $oslevel -s | $grep -q '^7200-03' || errpt_count_total=`     $errpt | $egrep -c -v '^IDENTIFIER'`
   $oslevel -s | $grep -q '^7200-03' && errpt_count_total=`sudo $errpt | $egrep -c -v '^IDENTIFIER'`
   #
   # see if any of the entries are of "Type:   PERM"
   # This will indicate a permanent error, which is more critical.
   # workaround for AIX 7200-03, try using sudo
   $oslevel -s | $grep -q '^7200-03' || errpt_count_perm=`     $errpt -a | $egrep -c '^Type: *PERM'`
   $oslevel -s | $grep -q '^7200-03' && errpt_count_perm=`sudo $errpt -a | $egrep -c '^Type: *PERM'`
   #
   #
   # Determine the status
   #
   if [[ "$errpt_count_total" -eq 0 ]] then
      echo "$CHECK_NAME OK - no error report entries"
      exit $OK
   fi
   #
   # if we get this far, there is at least one error in the errpt
   #
   if [[ "$errpt_count_total" -gt 0 ]] then
      #
      if [[ $verbose = "yes" ]] ; then
         echo Found errpt entries
      fi
      # slurp all the errpt entries into a single line of text so it can be used by nagios
      $oslevel -s | $grep -q '^7200-03' || errpt_message_body=`     $errpt | $egrep -v ^IDENTIFIER |$tr -s ' ' | $awk '{print substr($0,index($0,$5))}' | $tr '\n' '\t'`
      $oslevel -s | $grep -q '^7200-03' && errpt_message_body=`sudo $errpt | $egrep -v ^IDENTIFIER |$tr -s ' ' | $awk '{print substr($0,index($0,$5))}' | $tr '\n' '\t'`
      #
      # If the message body is ridiculously large, truncate it to the first 500 characters.
      # If the message body is huge, the sysadmin will want to login to the AIX box and run errpt anyway.
      if [[ ${#errpt_message_body} -gt 500 ]] then
         errpt_message_body=`echo $errpt_message_body | $awk '{print substr($0,1,500)}'`
      fi
      #
      #  Figure out if the alert severity is WARN or CRITICAL
      #
      if [ "$errpt_count_perm" -eq 0 ] ; then
         echo "$CHECK_NAME WARN: $errpt_count_total errpt entries, $errpt_count_perm PERManent errors:: $errpt_message_body"
         exit $WARN
      fi
      if [ "$errpt_count_perm" -gt 0 ] ; then
         echo "$CHECK_NAME CRITICAL: $errpt_count_total errpt entries, $errpt_count_perm PERManent errors: $errpt_message_body"
         exit $CRITICAL
      fi
   fi
}





function exit_with_unknown_error {
   #
   if [[ $verbose = "yes" ]] ; then
      echo Running exit_with_unknown_error function
   fi
   #
   # we should never get this far
   #
   echo "$CHECK_NAME UNKNOWN - an unknown error occurred"
   exit $UNKNOWN
}



#
# ---  Main body of script is below  ----------------------------------------------
#
#
# This section calls all the functions defined earlier in the script
#
declare_variables
sanity_checks
check_for_7200_03_bug
check_for_errpt_entries
exit_with_unknown_error



